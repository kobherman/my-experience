#   ####################
Курсоры 

крусор - основной механизм перемещения по рез-ту
  исполняемого запроса
в процедурах и тригерах часто используется для организации
  циклов по таблице = рез-т выполнения запроса

#   ####################



#1  ####################
create or alter procedure AG_LIST ( TOWN
    type of column AGENT.TOWN)
returns (
    NAME type of column AGENT.NAME_AG)
as
begin
    for     select AG.name_ag
                from agent AG
            where AG.town=:town
        into :name
    do
        suspend;
end

процедура, в уже привычном виде
 - "Курсорный Цикл"

(!!!) явное определение курсора и итерационный цикл (!!!):

create or alter procedure PREP10_1 (  --agsintown
    TOWN type of column AGENT.TOWN
)
returns (
    NAME type of column AGENT.NAME_AG)
as
declare C_AG cursor for (select AG.NAME_AG
                             from AGENT AG
                         where AG.TOWN = :TOWN);
begin
    open C_AG; -- курсор нужно явно открыть
    while (1=1) do
    begin
        fetch C_AG into :name;--извлечь строку по курсору
        if (row_count=0) then
            leave;--строк нет
        suspend;
    end
    close C_AG;--закрыть курсор

end

 - явный курсор.
можно многа раз вызывать



#   ####################

фактически, курсор описывает таблицу, кот-ая будет
  работать с оператором извлечения данных fetch
при этом, в соотв. с реляционной моделью, у таблицы должны быть
  определены имена всех столбцов
  => для столбцов со скалярными вычислениями необходима явная операция переименования
как тут:

declare C_AG_COUNT cursor for (select AG.TOWN,
                                       count(*) as cnt_ag
                                   from AGENT AG
                               group by AG.TOWN );

т.к. курсор служит для позиционирования в рез-ей таблице,
  допустимо использовать кго для update, delete
но тока для курсоров с одной таблицей
  (без join  и подзапросов)
#   ####################



#2  ####################
create or alter procedure PREP10_2  --addtowncode
as
declare variable TW type of column AGENT.TOWN;
declare variable CIFR char(1);
declare C_AG cursor for (
 select AG.TOWN
 from AGENT AG);
begin
    open C_AG;
    while (1 = 1) do
    begin
        fetch C_AG
            into :TW;

        if (row_count = 0) then
            leave;

        CIFR = 0;
        if (TW = 'Ростов') then
            CIFR = 6;
        if (TW = 'Батайск') then
            CIFR = 1;
        if (TW = 'Азов') then
            CIFR = 4;

        update AGENT
            set PHONE= substring(:CIFR||coalesce(PHONE,'') from 1 for 10)
            where current of C_AG; --позиция курсора
    end
    close C_AG;
end


к телефону поставщика прибавляем номер города
  Ростов - 6
  Батайск - 1
  Азов - 4
  else - 0
(номер в таблице описан как char(10)
  => если надо, удаление)



#   ####################

поскольку курсор позволяет выполнять позиционное редактирование,
  в курсорном цикле for допускается определить курсор, связанный с
  оператором select данного цикла - неявный курсор
При этом можно не сохранять результаты запроса в локальных переменных,
  т.к. курсор в этом случае можно оассматривать как структуру,
  поля которой имеют  имена, соответствующие именам столбцов в запросе

неявный курсор можно тоже исп. для редактирования по позиции курсора
#   ####################



#3  ####################
create or alter procedure PREP10_3 (  --riseeverysecondprice
 AG type of column AGENT.NAME_AG)
as
declare variable I integer = 0;
declare variable ID_A type of column AGENT.ID_AG;
begin
    /* Procedure Text */
    id_a=(select id_ag
              from agent
          where name_ag=:ag);

    if (id_a is null) then
    begin
        in autonomous transaction do
            insert into log_file(inform)
                values (' Error '||:ag);
        exception error;
    end


    for     select *
                from operation
            where id_ag =:id_a
            order by op_date
    as cursor CRN do
    begin
        update operation
            set price = price *(1+0.01*:i)
            where current of CRN;

        insert into log_file(inform,ddata)
            values ('price*(1+0.01*'||:i||')',CRN.op_date);

        i=i+1;
    end
end

выбираются все операции поставщика
  и в каждой следующей цена увеличивается на 1%





























